var parentSchema = require('./schema.js');
var cleanAndCreate = require('../cleanAndCreate/index.js');
var async = require('async');
var array = [];

Object.keys(parentSchema).forEach(function(key){
  array.push(key);
});

var index = {
  process: function() {
    cleanAndCreate.process(function(){
      var excelParser = require('excel-parser');
      var workbook = __dirname + '/../../test2.xls';

      excelParser.parse({
        inFile: workbook,
        worksheet: 1,
        skipEmpty: false
      }, function(err, articles) {
        if (err) {
          console.log(err);
        } else {
          var i = 0;
          async.eachSeries(articles, function(article, finalCallback) {
            if(i !== 0) {
              async.eachSeries(array, function(key, callback){
                var q = async.queue(function(articleObject, callback){
                    var article = articleObject;

                    var schema = parentSchema[key];
                    var schemaFields = schema.fields;
                    var object = {};
                    Object.keys(schemaFields).forEach(function(schemaFieldsKey){
                      var value = schemaFields[schemaFieldsKey];
                      var key = schemaFieldsKey;
                      object[value] = article[key];
                    });
                    var buildObject = schema.model.build(object);
                    // Associated
                    if(schema.associated !== undefined) {
                      schema.associated.forEach(function(associated){
                        var object = {};
                        object[associated.fieldName] = article[associated.index];
                        console.log(object);
                        associated.model.find(object).then(function(associatedObject){
                          if(associatedObject !== null) {
                            associatedObject[associated.associatedFunction](buildObject);
                          }
                        });
                      });
                    }
                    buildObject.save().then(function(){
                        callback();
                    }).catch(function(e){
                        callback();
                    });
                    setTimeout(finalCallback, 2000);
                }, 1); 


                q.drain = function() {
                  finalCallback();
                }
                
                q.push({article: article}, function(){});
              });

            }
          i++;
          });
        }
      });
    });
  }
};

module.exports = index;
